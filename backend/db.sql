-- App User
CREATE SEQUENCE IF NOT EXISTS public.ID_SEQ_APP_USER INCREMENT 1 START 1;
CREATE TABLE IF NOT EXISTS public.APP_USER(
    ID INTEGER PRIMARY KEY NOT NULL
);
ALTER TABLE public.APP_USER ADD COLUMN NAME CHARACTER VARYING NOT NULL;
ALTER TABLE public.APP_USER ADD COLUMN USERNAME CHARACTER VARYING NOT NULL;
ALTER TABLE public.APP_USER ADD COLUMN PASSWORD CHARACTER VARYING NOT NULL;
ALTER TABLE public.APP_USER ADD COLUMN IS_ADMIN BOOLEAN;

-- Access Token
CREATE SEQUENCE IF NOT EXISTS public.ID_SEQ_ACCESS_TOKEN INCREMENT 1 START 1;
CREATE TABLE IF NOT EXISTS public.ACCESS_TOKEN(
    ID INTEGER PRIMARY KEY NOT NULL
);
ALTER TABLE public.ACCESS_TOKEN ADD COLUMN USER_ID INTEGER NOT NULL
CONSTRAINT ACCESS_TOKEN_USER_ID_FK REFERENCES APP_USER(ID)
ON UPDATE CASCADE 
ON DELETE RESTRICT;
ALTER TABLE public.ACCESS_TOKEN ADD COLUMN EXPIRATION_DATE TIMESTAMP NOT NULL;
ALTER TABLE public.ACCESS_TOKEN ADD COLUMN VALUE CHARACTER VARYING NOT NULL;


-- Refresh Token
CREATE SEQUENCE IF NOT EXISTS public.ID_SEQ_REFRESH_TOKEN INCREMENT 1 START 1;
CREATE TABLE IF NOT EXISTS public.REFRESH_TOKEN(
    ID INTEGER PRIMARY KEY NOT NULL
);
ALTER TABLE public.REFRESH_TOKEN ADD COLUMN USER_ID INTEGER NOT NULL
CONSTRAINT REFRESH_TOKEN_USER_ID_FK REFERENCES APP_USER(ID)
ON UPDATE CASCADE 
ON DELETE RESTRICT;
ALTER TABLE public.REFRESH_TOKEN ADD COLUMN EXPIRATION_DATE TIMESTAMP NOT NULL;
ALTER TABLE public.REFRESH_TOKEN ADD COLUMN VALUE CHARACTER VARYING NOT NULL;

-- Create admin user
CREATE OR REPLACE FUNCTION public.CREATE_ADMIN()
RETURNS VOID AS 
$BODY$
DECLARE _count INTEGER;
BEGIN
    SELECT COUNT(*) FROM public.APP_USER WHERE IS_ADMIN IS TRUE INTO _count;
    IF _count <= 0 THEN
        INSERT INTO public.APP_USER(ID, NAME, USERNAME, PASSWORD, IS_ADMIN) 
        VALUES(NEXTVAL('ID_SEQ_APP_USER'), 'Administrator', 'admin', '$2b$10$5Sjg4VPeE4v8oX8Wy.KUbetBDi.2NwIsZilkMBzRD1FpeDC7GZKPe', true);
    END IF;
END;
$BODY$ LANGUAGE plpgsql VOLATILE COST 100;
SELECT CREATE_ADMIN();